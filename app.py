from flask import Flask, request, jsonify
from flask_cors import CORS
import base64
from io import BytesIO
from PIL import Image, UnidentifiedImageError
import numpy as np
import tensorflow as tf

app = Flask(__name__)
CORS(app)

# T·∫£i m√¥ h√¨nh m·ªôt l·∫ßn
model = tf.keras.models.load_model('minist_model.h5')
print("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        print("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ client")

        if 'image' not in data:
            return jsonify({'error': 'Thi·∫øu ·∫£nh'}), 400

        image_data = base64.b64decode(data['image'])

        try:
            image = Image.open(BytesIO(image_data))
        except UnidentifiedImageError:
            return jsonify({'error': '·∫¢nh kh√¥ng h·ª£p l·ªá'}), 400

        # X·ª≠ l√Ω ·∫£nh
        image = image.convert('L')  # Grayscale

        # T·∫°o ng∆∞·ª°ng ƒë·ªÉ chuy·ªÉn ·∫£nh th√†nh ƒëen v√† tr·∫Øng r√µ r√†ng h∆°n (thresholding)
        threshold_value = 200  # Gi√° tr·ªã ng∆∞·ª°ng t√πy ch·ªânh (c√≥ th·ªÉ thay ƒë·ªïi)
        image = image.point(lambda p: 200 if p < threshold_value else 0)

        # Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc 28x28
        image_resized = image.resize((28, 28))

        # Chuy·ªÉn ·∫£nh th√†nh m·∫£ng numpy v√† chu·∫©n h√≥a gi√° tr·ªã pixel v·ªÅ [0, 1]
        img_array = np.array(image_resized) / 255.0

        # Reshape ·∫£nh cho ph√π h·ª£p v·ªõi ƒë·∫ßu v√†o c·ªßa m√¥ h√¨nh (1, 28, 28, 1)
        img_array = img_array.reshape(1, 28, 28, 1)

        print(f"üìä Pixel range: {img_array.min():.4f} - {img_array.max():.4f}")

        # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh
        prediction = model.predict(img_array)
        predicted = int(np.argmax(prediction))
        print(f"üî¢ Softmax: {np.round(prediction[0], 3)}")
        print(f"‚úÖ D·ª± ƒëo√°n: {predicted}")

        return jsonify({'prediction': predicted})

    except Exception as e:
        print(f"‚ùå L·ªói server: {str(e)}")
        return jsonify({'error': 'L·ªói server.'}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
